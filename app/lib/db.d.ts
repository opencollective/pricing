/**
 * This file was generated by kysely-codegen.
 * Please do not edit it manually.
 */

import type { ColumnType } from "kysely";

export type ArrayType<T> = ArrayTypeImpl<T> extends (infer U)[]
  ? U[]
  : ArrayTypeImpl<T>;

export type ArrayTypeImpl<T> = T extends ColumnType<infer S, infer I, infer U>
  ? ColumnType<S[], I[], U[]>
  : T[];

export type EnumAccountingcategoriesAppliesto = "HOST" | "HOSTED_COLLECTIVES";

export type EnumAccountingcategoriesKind = "ADDED_FUNDS" | "CONTRIBUTION" | "EXPENSE";

export type EnumApplicationsType = "apiKey" | "oAuth";

export type EnumCommenthistoriesType = "COMMENT" | "PRIVATE_NOTE";

export type EnumCommentsType = "COMMENT" | "PRIVATE_NOTE";

export type EnumExpensehistoriesFeespayer = "COLLECTIVE" | "PAYEE";

export type EnumExpensehistoriesType = "CHARGE" | "FUNDING_REQUEST" | "GRANT" | "INVOICE" | "RECEIPT" | "SETTLEMENT" | "UNCLASSIFIED";

export type EnumExpenseitemsExpensecurrencyfxratesource = "OPENCOLLECTIVE" | "PAYPAL" | "USER" | "WISE";

export type EnumExpensesFeespayer = "COLLECTIVE" | "PAYEE";

export type EnumExpensesType = "CHARGE" | "FUNDING_REQUEST" | "GRANT" | "INVOICE" | "RECEIPT" | "SETTLEMENT" | "UNCLASSIFIED";

export type EnumHostapplicationsStatus = "APPROVED" | "EXPIRED" | "PENDING" | "REJECTED";

export type EnumLegaldocumentsDocumenttype = "US_TAX_FORM";

export type EnumLegaldocumentsRequeststatus = "ERROR" | "INVALID" | "NOT_REQUESTED" | "RECEIVED" | "REQUESTED";

export type EnumLegaldocumentsService = "DROPBOX_FORMS" | "OPENCOLLECTIVE";

export type EnumMemberinvitationsRole = "ACCOUNTANT" | "ADMIN" | "ATTENDEE" | "BACKER" | "CONTRIBUTOR" | "FOLLOWER" | "HOST" | "MEMBER";

export type EnumMigrationlogsType = "BAN_ACCOUNTS" | "MANUAL" | "MERGE_ACCOUNTS" | "MIGRATION" | "MODEL_FIX" | "MOVE_EXPENSES" | "MOVE_ORDERS";

export type EnumOauthauthorizationcodesScope = "account" | "activities" | "applications" | "connectedAccounts" | "conversations" | "email" | "expenses" | "host" | "incognito" | "orders" | "root" | "transactions" | "updates" | "virtualCards" | "webhooks";

export type EnumPayoutmethodsType = "ACCOUNT_BALANCE" | "BANK_ACCOUNT" | "CREDIT_CARD" | "OTHER" | "PAYPAL";

export type EnumPaypalplansInterval = "day" | "month" | "week" | "year";

export type EnumPersonaltokensScope = "account" | "activities" | "applications" | "connectedAccounts" | "conversations" | "email" | "expenses" | "host" | "incognito" | "orders" | "root" | "transactions" | "updates" | "virtualCards" | "webhooks";

export type EnumRecurringexpensesInterval = "day" | "month" | "quarter" | "week" | "year";

export type EnumRequiredlegaldocumentsDocumenttype = "US_TAX_FORM";

export type EnumSuspendedassetsType = "CREDIT_CARD" | "EMAIL_ADDRESS" | "EMAIL_DOMAIN" | "IP" | "USER";

export type EnumTierhistoriesAmounttype = "FIXED" | "FLEXIBLE";

export type EnumTiersAmounttype = "FIXED" | "FLEXIBLE";

export type EnumTransactionsettlementsStatus = "INVOICED" | "OWED" | "SETTLED";

export type EnumTransactionsimportsrowsStatus = "IGNORED" | "LINKED" | "ON_HOLD" | "PENDING";

export type EnumTransactionsimportsType = "CSV" | "MANUAL" | "PLAID";

export type EnumTransactionsKind = "ADDED_FUNDS" | "BALANCE_TRANSFER" | "CONTRIBUTION" | "EXPENSE" | "HOST_FEE" | "HOST_FEE_SHARE" | "HOST_FEE_SHARE_DEBT" | "PAYMENT_PROCESSOR_COVER" | "PAYMENT_PROCESSOR_DISPUTE_FEE" | "PAYMENT_PROCESSOR_FEE" | "PLATFORM_FEE" | "PLATFORM_TIP" | "PLATFORM_TIP_DEBT" | "PREPAID_PAYMENT_METHOD" | "TAX";

export type EnumUsertokensScope = "account" | "activities" | "applications" | "connectedAccounts" | "conversations" | "email" | "expenses" | "host" | "incognito" | "orders" | "root" | "transactions" | "updates" | "virtualCards" | "webhooks";

export type EnumUsertokensType = "OAUTH";

export type EnumVirtualcardrequestsStatus = "APPROVED" | "PENDING" | "REJECTED";

export type EnumVirtualcardsProvider = "PRIVACY" | "STRIPE";

export type Generated<T> = T extends ColumnType<infer S, infer I, infer U>
  ? ColumnType<S, I | undefined, U>
  : ColumnType<T, T | undefined, T>;

export type Int8 = ColumnType<string, bigint | number | string, bigint | number | string>;

export type Json = JsonValue;

export type JsonArray = JsonValue[];

export type JsonObject = {
  [x: string]: JsonValue | undefined;
};

export type JsonPrimitive = boolean | number | string | null;

export type JsonValue = JsonArray | JsonObject | JsonPrimitive;

export type Numeric = ColumnType<string, number | string, number | string>;

export type Timestamp = ColumnType<Date, Date | string, Date | string>;

export interface AccountingCategories {
  appliesTo: EnumAccountingcategoriesAppliesto | null;
  code: string;
  CollectiveId: number | null;
  createdAt: Timestamp;
  expensesTypes: ArrayType<EnumExpensesType> | null;
  friendlyName: string | null;
  hostOnly: Generated<boolean>;
  id: Generated<number>;
  instructions: string | null;
  kind: EnumAccountingcategoriesKind | null;
  name: string;
  updatedAt: Timestamp;
}

export interface Activities {
  CollectiveId: number | null;
  createdAt: Timestamp;
  data: Json | null;
  ExpenseId: number | null;
  FromCollectiveId: number | null;
  HostCollectiveId: number | null;
  id: Generated<number>;
  OrderId: number | null;
  TransactionId: number | null;
  type: string | null;
  UserId: number | null;
  UserTokenId: number | null;
}

export interface Agreements {
  CollectiveId: number | null;
  createdAt: Generated<Timestamp>;
  deletedAt: Timestamp | null;
  expiresAt: Timestamp | null;
  HostCollectiveId: number | null;
  id: Generated<number>;
  notes: string | null;
  title: string;
  updatedAt: Generated<Timestamp>;
  UploadedFileId: number | null;
  UserId: number | null;
}

export interface Applications {
  apiKey: string | null;
  callbackUrl: string | null;
  clientId: string | null;
  clientSecret: string | null;
  CollectiveId: number;
  createdAt: Timestamp;
  CreatedByUserId: number | null;
  data: Json | null;
  deletedAt: Timestamp | null;
  description: string | null;
  disabled: Generated<boolean | null>;
  id: Generated<number>;
  name: string | null;
  preAuthorize2FA: Generated<boolean>;
  type: EnumApplicationsType | null;
  updatedAt: Timestamp;
}

export interface CollectiveHistories {
  address: string | null;
  approvedAt: Timestamp | null;
  archivedAt: Timestamp;
  backgroundImage: string | null;
  company: string | null;
  contributionPolicy: string | null;
  countryISO: string | null;
  createdAt: Timestamp | null;
  CreatedByUserId: number | null;
  currency: string | null;
  data: Json | null;
  deactivatedAt: Timestamp | null;
  deletedAt: Timestamp | null;
  description: string | null;
  endsAt: Timestamp | null;
  expensePolicy: string | null;
  geoLocationLatLong: Json | null;
  githubHandle: string | null;
  hid: Generated<Int8>;
  HostCollectiveId: number | null;
  hostFeePercent: number | null;
  id: number | null;
  image: string | null;
  isActive: boolean | null;
  isHostAccount: Generated<boolean | null>;
  isIncognito: Generated<boolean | null>;
  isPledged: Generated<boolean | null>;
  LastEditedByUserId: number | null;
  legalName: string | null;
  locationName: string | null;
  longDescription: string | null;
  name: string | null;
  ParentCollectiveId: number | null;
  plan: string | null;
  platformFeePercent: number | null;
  repositoryUrl: Generated<string | null>;
  searchTsVector: string | null;
  settings: Json | null;
  slug: string | null;
  startsAt: Timestamp | null;
  tags: string[] | null;
  timezone: string | null;
  twitterHandle: string | null;
  type: Generated<string | null>;
  updatedAt: Timestamp | null;
  website: string | null;
}

export interface Collectives {
  address: string | null;
  approvedAt: Timestamp | null;
  backgroundImage: string | null;
  company: string | null;
  contributionPolicy: string | null;
  countryISO: string | null;
  createdAt: Generated<Timestamp>;
  CreatedByUserId: number | null;
  currency: Generated<string | null>;
  data: Json | null;
  deactivatedAt: Timestamp | null;
  deletedAt: Timestamp | null;
  description: string | null;
  endsAt: Timestamp | null;
  geoLocationLatLong: Json | null;
  githubHandle: string | null;
  HostCollectiveId: number | null;
  hostFeePercent: number | null;
  id: Generated<number>;
  image: string | null;
  isActive: Generated<boolean | null>;
  isHostAccount: Generated<boolean>;
  isIncognito: Generated<boolean | null>;
  LastEditedByUserId: number | null;
  legalName: string | null;
  locationName: string | null;
  longDescription: string | null;
  name: string;
  ParentCollectiveId: number | null;
  plan: string | null;
  platformFeePercent: number | null;
  repositoryUrl: Generated<string | null>;
  searchTsVector: Generated<string | null>;
  settings: Json | null;
  slug: string | null;
  startsAt: Timestamp | null;
  tags: string[] | null;
  timezone: string | null;
  twitterHandle: string | null;
  type: Generated<string | null>;
  updatedAt: Generated<Timestamp>;
  website: string | null;
}

export interface CommentHistories {
  archivedAt: Timestamp;
  CollectiveId: number | null;
  ConversationId: number | null;
  createdAt: Timestamp | null;
  CreatedByUserId: number | null;
  deletedAt: Timestamp | null;
  ExpenseId: number | null;
  FromCollectiveId: number | null;
  hid: Generated<Int8>;
  HostApplicationId: number | null;
  html: string | null;
  id: number | null;
  markdown: string | null;
  OrderId: number | null;
  type: Generated<EnumCommenthistoriesType | null>;
  updatedAt: Timestamp | null;
  UpdateId: number | null;
}

export interface Comments {
  CollectiveId: number;
  ConversationId: number | null;
  createdAt: Timestamp;
  CreatedByUserId: number | null;
  deletedAt: Timestamp | null;
  ExpenseId: number | null;
  FromCollectiveId: number;
  HostApplicationId: number | null;
  html: string | null;
  id: Generated<number>;
  OrderId: number | null;
  type: Generated<EnumCommentsType>;
  updatedAt: Timestamp;
  UpdateId: number | null;
}

export interface ConnectedAccounts {
  clientId: string | null;
  CollectiveId: number | null;
  createdAt: Timestamp;
  CreatedByUserId: number | null;
  data: Json | null;
  deletedAt: Timestamp | null;
  hash: string | null;
  id: Generated<number>;
  refreshToken: string | null;
  service: string | null;
  settings: Json | null;
  token: string | null;
  updatedAt: Timestamp;
  username: string | null;
}

export interface ConversationFollowers {
  ConversationId: number;
  createdAt: Timestamp;
  id: Generated<number>;
  isActive: Generated<boolean>;
  updatedAt: Timestamp;
  UserId: number;
}

export interface Conversations {
  CollectiveId: number;
  createdAt: Timestamp;
  CreatedByUserId: number;
  deletedAt: Timestamp | null;
  FromCollectiveId: number;
  id: Generated<number>;
  RootCommentId: number | null;
  summary: string;
  tags: string[] | null;
  title: string;
  updatedAt: Timestamp;
}

export interface CurrencyExchangeRates {
  createdAt: Timestamp;
  deletedAt: Timestamp | null;
  from: string;
  id: Generated<number>;
  rate: number;
  to: string;
  updatedAt: Timestamp;
}

export interface CurrentCollectiveBalance {
  CollectiveId: number | null;
  disputedNetAmountInHostCurrency: number | null;
  hostCurrency: string | null;
  netAmountInHostCurrency: number | null;
}

export interface CurrentCollectiveTransactionStats {
  CollectiveId: number | null;
  hostCurrency: string | null;
  totalAmountReceivedInHostCurrency: Int8 | null;
  totalAmountSpentInHostCurrency: Int8 | null;
  totalNetAmountReceivedInHostCurrency: number | null;
  totalNetAmountSpentInHostCurrency: number | null;
}

export interface EmojiReactions {
  CommentId: number | null;
  createdAt: Timestamp;
  emoji: string;
  FromCollectiveId: number;
  id: Generated<number>;
  updatedAt: Timestamp;
  UpdateId: number | null;
  UserId: number;
}

export interface ExpenseAttachedFiles {
  createdAt: Timestamp;
  CreatedByUserId: number | null;
  ExpenseId: number;
  id: Generated<number>;
  updatedAt: Timestamp;
  url: string;
}

export interface ExpenseHistories {
  AccountingCategoryId: number | null;
  amount: number | null;
  archivedAt: Timestamp;
  attachment: string | null;
  CollectiveId: number | null;
  createdAt: Timestamp | null;
  currency: string | null;
  data: Json | null;
  deletedAt: Timestamp | null;
  description: string | null;
  feesPayer: Generated<EnumExpensehistoriesFeespayer | null>;
  FromCollectiveId: number | null;
  hid: Generated<Int8>;
  HostCollectiveId: number | null;
  id: number | null;
  incurredAt: Timestamp | null;
  InvoiceFileId: number | null;
  invoiceInfo: string | null;
  lastEditedById: number | null;
  legacyPayoutMethod: string | null;
  longDescription: string | null;
  onHold: Generated<boolean | null>;
  payeeLocation: Json | null;
  PaymentMethodId: number | null;
  PayoutMethodId: number | null;
  privateMessage: string | null;
  RecurringExpenseId: number | null;
  reference: string | null;
  status: string | null;
  tags: string[] | null;
  type: Generated<EnumExpensehistoriesType | null>;
  updatedAt: Timestamp | null;
  UserId: number | null;
  VirtualCardId: string | null;
}

export interface ExpenseItems {
  amount: number;
  createdAt: Timestamp;
  CreatedByUserId: number | null;
  currency: Generated<string>;
  deletedAt: Timestamp | null;
  description: string | null;
  expenseCurrencyFxRate: Generated<number>;
  expenseCurrencyFxRateSource: EnumExpenseitemsExpensecurrencyfxratesource | null;
  ExpenseId: number;
  id: Generated<number>;
  incurredAt: Timestamp;
  updatedAt: Timestamp;
  url: string | null;
}

export interface Expenses {
  AccountingCategoryId: number | null;
  amount: number;
  CollectiveId: number;
  createdAt: Timestamp;
  currency: string;
  data: Json | null;
  deletedAt: Timestamp | null;
  description: string;
  feesPayer: Generated<EnumExpensesFeespayer>;
  FromCollectiveId: number;
  HostCollectiveId: number | null;
  id: Generated<number>;
  incurredAt: Timestamp;
  InvoiceFileId: number | null;
  invoiceInfo: string | null;
  lastEditedById: number;
  legacyPayoutMethod: string;
  longDescription: string | null;
  onHold: Generated<boolean>;
  payeeLocation: Json | null;
  PaymentMethodId: number | null;
  PayoutMethodId: number | null;
  privateMessage: string | null;
  RecurringExpenseId: number | null;
  reference: string | null;
  status: Generated<string>;
  tags: string[] | null;
  type: Generated<EnumExpensesType | null>;
  updatedAt: Timestamp;
  UserId: number;
  VirtualCardId: string | null;
}

export interface GeographyColumns {
  coord_dimension: number | null;
  f_geography_column: string | null;
  f_table_catalog: string | null;
  f_table_name: string | null;
  f_table_schema: string | null;
  srid: number | null;
  type: string | null;
}

export interface GeometryColumns {
  coord_dimension: number | null;
  f_geometry_column: string | null;
  f_table_catalog: string | null;
  f_table_name: string | null;
  f_table_schema: string | null;
  srid: number | null;
  type: string | null;
}

export interface HostApplications {
  CollectiveId: number;
  createdAt: Timestamp;
  CreatedByUserId: number | null;
  customData: Json | null;
  deletedAt: Timestamp | null;
  HostCollectiveId: number;
  id: Generated<number>;
  message: string | null;
  status: EnumHostapplicationsStatus;
  updatedAt: Timestamp;
}

export interface LegalDocuments {
  CollectiveId: number | null;
  createdAt: Timestamp;
  data: Json | null;
  deletedAt: Timestamp | null;
  documentLink: string | null;
  documentType: EnumLegaldocumentsDocumenttype | null;
  id: Generated<number>;
  requestStatus: EnumLegaldocumentsRequeststatus | null;
  service: Generated<EnumLegaldocumentsService>;
  updatedAt: Timestamp;
  year: number;
}

export interface Locations {
  address: string | null;
  CollectiveId: number | null;
  country: string | null;
  createdAt: Generated<Timestamp>;
  deletedAt: Timestamp | null;
  geoLocationLatLong: Json | null;
  id: Generated<number>;
  name: string | null;
  structured: Json | null;
  updatedAt: Generated<Timestamp>;
}

export interface MemberInvitations {
  CollectiveId: number;
  createdAt: Timestamp;
  CreatedByUserId: number;
  deletedAt: Timestamp | null;
  description: string | null;
  id: Generated<number>;
  MemberCollectiveId: number;
  role: EnumMemberinvitationsRole;
  since: Timestamp;
  TierId: number | null;
  updatedAt: Timestamp;
}

export interface Members {
  CollectiveId: number;
  createdAt: Timestamp;
  CreatedByUserId: number;
  deletedAt: Timestamp | null;
  description: string | null;
  id: Generated<number>;
  MemberCollectiveId: number | null;
  publicMessage: string | null;
  role: Generated<string>;
  since: Timestamp;
  TierId: number | null;
  updatedAt: Timestamp;
}

export interface MigrationLogs {
  createdAt: Timestamp;
  CreatedByUserId: number | null;
  data: Generated<Json>;
  description: string;
  id: Generated<number>;
  type: EnumMigrationlogsType;
}

export interface Notifications {
  active: Generated<boolean | null>;
  channel: Generated<string | null>;
  CollectiveId: number | null;
  createdAt: Timestamp;
  id: Generated<number>;
  lastSuccessAt: Timestamp | null;
  type: string | null;
  updatedAt: Timestamp;
  UserId: number | null;
  webhookUrl: string | null;
}

export interface OAuthAuthorizationCodes {
  ApplicationId: number;
  code: string;
  createdAt: Timestamp;
  data: Json | null;
  deletedAt: Timestamp | null;
  expiresAt: Timestamp;
  id: Generated<number>;
  redirectUri: string;
  scope: ArrayType<EnumOauthauthorizationcodesScope> | null;
  updatedAt: Timestamp;
  UserId: number;
}

export interface OrderHistories {
  AccountingCategoryId: number | null;
  archivedAt: Timestamp;
  CollectiveId: number | null;
  createdAt: Timestamp | null;
  CreatedByUserId: number | null;
  currency: string | null;
  data: Json | null;
  deletedAt: Timestamp | null;
  description: string | null;
  FromCollectiveId: number | null;
  hid: Generated<Int8>;
  id: number | null;
  interval: string | null;
  MatchingPaymentMethodId: number | null;
  PaymentMethodId: number | null;
  platformTipAmount: number | null;
  platformTipEligible: boolean | null;
  privateMessage: string | null;
  processedAt: Timestamp | null;
  publicMessage: string | null;
  quantity: number | null;
  ReferralCollectiveId: number | null;
  status: Generated<string | null>;
  SubscriptionId: number | null;
  tags: string[] | null;
  taxAmount: number | null;
  TierId: number | null;
  totalAmount: number | null;
  updatedAt: Timestamp | null;
}

export interface Orders {
  AccountingCategoryId: number | null;
  CollectiveId: number | null;
  createdAt: Generated<Timestamp>;
  CreatedByUserId: number | null;
  currency: Generated<string | null>;
  data: Json | null;
  deletedAt: Timestamp | null;
  description: string | null;
  FromCollectiveId: number | null;
  id: Generated<number>;
  interval: string | null;
  PaymentMethodId: number | null;
  platformTipAmount: number | null;
  platformTipEligible: boolean | null;
  privateMessage: string | null;
  processedAt: Timestamp | null;
  publicMessage: string | null;
  quantity: number | null;
  status: Generated<string>;
  SubscriptionId: number | null;
  tags: string[] | null;
  taxAmount: number | null;
  TierId: number | null;
  totalAmount: number | null;
  updatedAt: Generated<Timestamp>;
}

export interface PaymentMethods {
  archivedAt: Timestamp | null;
  batch: string | null;
  CollectiveId: number | null;
  confirmedAt: Timestamp | null;
  createdAt: Timestamp;
  CreatedByUserId: number | null;
  currency: string | null;
  customerId: string | null;
  data: Json | null;
  deletedAt: Timestamp | null;
  description: string | null;
  expiryDate: Timestamp | null;
  id: Generated<number>;
  initialBalance: number | null;
  limitedToHostCollectiveIds: number[] | null;
  limitedToTags: string[] | null;
  monthlyLimitPerMember: number | null;
  name: string | null;
  primary: Generated<boolean | null>;
  saved: Generated<boolean | null>;
  service: Generated<string | null>;
  SourcePaymentMethodId: number | null;
  token: string | null;
  type: string | null;
  updatedAt: Timestamp;
  uuid: string | null;
}

export interface PayoutMethods {
  CollectiveId: number;
  createdAt: Timestamp;
  CreatedByUserId: number | null;
  data: Json | null;
  deletedAt: Timestamp | null;
  id: Generated<number>;
  isSaved: Generated<boolean>;
  name: string | null;
  type: EnumPayoutmethodsType;
  updatedAt: Timestamp;
}

export interface PaypalPlans {
  amount: number;
  createdAt: Timestamp;
  currency: string;
  deletedAt: Timestamp | null;
  id: string;
  interval: EnumPaypalplansInterval;
  ProductId: string;
  updatedAt: Timestamp;
}

export interface PaypalProducts {
  CollectiveId: number;
  createdAt: Timestamp;
  deletedAt: Timestamp | null;
  HostCollectiveId: number | null;
  id: string;
  TierId: number | null;
  updatedAt: Timestamp;
}

export interface PersonalTokens {
  CollectiveId: number;
  createdAt: Timestamp;
  data: Json | null;
  deletedAt: Timestamp | null;
  expiresAt: Timestamp | null;
  id: Generated<number>;
  lastUsedAt: Timestamp | null;
  name: string | null;
  preAuthorize2FA: Generated<boolean>;
  scope: ArrayType<EnumPersonaltokensScope> | null;
  token: string;
  updatedAt: Timestamp;
  UserId: number;
}

export interface PgStatStatements {
  blk_read_time: number | null;
  blk_write_time: number | null;
  calls: Int8 | null;
  dbid: number | null;
  jit_emission_count: Int8 | null;
  jit_emission_time: number | null;
  jit_functions: Int8 | null;
  jit_generation_time: number | null;
  jit_inlining_count: Int8 | null;
  jit_inlining_time: number | null;
  jit_optimization_count: Int8 | null;
  jit_optimization_time: number | null;
  local_blks_dirtied: Int8 | null;
  local_blks_hit: Int8 | null;
  local_blks_read: Int8 | null;
  local_blks_written: Int8 | null;
  max_exec_time: number | null;
  max_plan_time: number | null;
  mean_exec_time: number | null;
  mean_plan_time: number | null;
  min_exec_time: number | null;
  min_plan_time: number | null;
  plans: Int8 | null;
  query: string | null;
  queryid: Int8 | null;
  rows: Int8 | null;
  shared_blks_dirtied: Int8 | null;
  shared_blks_hit: Int8 | null;
  shared_blks_read: Int8 | null;
  shared_blks_written: Int8 | null;
  stddev_exec_time: number | null;
  stddev_plan_time: number | null;
  temp_blk_read_time: number | null;
  temp_blk_write_time: number | null;
  temp_blks_read: Int8 | null;
  temp_blks_written: Int8 | null;
  toplevel: boolean | null;
  total_exec_time: number | null;
  total_plan_time: number | null;
  userid: number | null;
  wal_bytes: Numeric | null;
  wal_fpi: Int8 | null;
  wal_records: Int8 | null;
}

export interface PgStatStatementsInfo {
  dealloc: Int8 | null;
  stats_reset: Timestamp | null;
}

export interface RasterColumns {
  blocksize_x: number | null;
  blocksize_y: number | null;
  extent: string | null;
  nodata_values: number[] | null;
  num_bands: number | null;
  out_db: boolean[] | null;
  pixel_types: string[] | null;
  r_raster_column: string | null;
  r_table_catalog: string | null;
  r_table_name: string | null;
  r_table_schema: string | null;
  regular_blocking: boolean | null;
  same_alignment: boolean | null;
  scale_x: number | null;
  scale_y: number | null;
  spatial_index: boolean | null;
  srid: number | null;
}

export interface RasterOverviews {
  o_raster_column: string | null;
  o_table_catalog: string | null;
  o_table_name: string | null;
  o_table_schema: string | null;
  overview_factor: number | null;
  r_raster_column: string | null;
  r_table_catalog: string | null;
  r_table_name: string | null;
  r_table_schema: string | null;
}

export interface RecurringExpenses {
  CollectiveId: number;
  createdAt: Timestamp;
  deletedAt: Timestamp | null;
  endsAt: Timestamp | null;
  FromCollectiveId: number;
  id: Generated<number>;
  interval: EnumRecurringexpensesInterval;
  lastDraftedAt: Timestamp | null;
  updatedAt: Timestamp;
}

export interface RequiredLegalDocuments {
  createdAt: Timestamp;
  deletedAt: Timestamp | null;
  documentType: EnumRequiredlegaldocumentsDocumenttype | null;
  HostCollectiveId: number | null;
  id: Generated<number>;
  updatedAt: Timestamp;
}

export interface SequelizeLedgerMeta {
  name: string;
}

export interface SequelizeMeta {
  name: string;
}

export interface SocialLinks {
  CollectiveId: number;
  createdAt: Generated<Timestamp>;
  order: number;
  type: Generated<string>;
  updatedAt: Generated<Timestamp>;
  url: string;
}

export interface SpatialRefSys {
  auth_name: string | null;
  auth_srid: number | null;
  proj4text: string | null;
  srid: number;
  srtext: string | null;
}

export interface SubscriptionHistories {
  activatedAt: Timestamp | null;
  amount: number | null;
  archivedAt: Timestamp;
  chargeNumber: number | null;
  chargeRetryCount: number | null;
  createdAt: Timestamp | null;
  currency: string | null;
  data: Json | null;
  deactivatedAt: Timestamp | null;
  deletedAt: Timestamp | null;
  hid: Generated<Int8>;
  id: number | null;
  interval: string | null;
  isActive: boolean | null;
  isManagedExternally: Generated<boolean | null>;
  lastChargedAt: Timestamp | null;
  nextChargeDate: Timestamp | null;
  nextPeriodStart: Timestamp | null;
  paypalSubscriptionId: string | null;
  quantity: number | null;
  stripeSubscriptionId: string | null;
  updatedAt: Timestamp | null;
}

export interface Subscriptions {
  activatedAt: Timestamp | null;
  amount: number | null;
  chargeNumber: number | null;
  chargeRetryCount: Generated<number | null>;
  createdAt: Timestamp;
  currency: Generated<string | null>;
  data: Json | null;
  deactivatedAt: Timestamp | null;
  deletedAt: Timestamp | null;
  id: Generated<number>;
  interval: Generated<string | null>;
  isActive: Generated<boolean | null>;
  isManagedExternally: Generated<boolean | null>;
  lastChargedAt: Timestamp | null;
  nextChargeDate: Timestamp | null;
  nextPeriodStart: Timestamp | null;
  paypalSubscriptionId: string | null;
  quantity: number | null;
  stripeSubscriptionId: string | null;
  updatedAt: Timestamp;
}

export interface SuspendedAssets {
  createdAt: Timestamp;
  deletedAt: Timestamp | null;
  fingerprint: string;
  id: Generated<number>;
  reason: string;
  type: EnumSuspendedassetsType;
  updatedAt: Timestamp;
}

export interface TierHistories {
  amount: number | null;
  amountType: EnumTierhistoriesAmounttype | null;
  archivedAt: Timestamp;
  button: string | null;
  CollectiveId: number | null;
  createdAt: Timestamp | null;
  currency: string | null;
  customFields: Json | null;
  data: Json | null;
  deletedAt: Timestamp | null;
  description: string | null;
  endsAt: Timestamp | null;
  goal: number | null;
  hid: Generated<Int8>;
  id: number | null;
  interval: string | null;
  longDescription: string | null;
  maxQuantity: number | null;
  minimumAmount: number | null;
  name: string | null;
  presets: number[] | null;
  slug: string | null;
  startsAt: Timestamp | null;
  type: string | null;
  updatedAt: Timestamp | null;
  useStandalonePage: Generated<boolean | null>;
  videoUrl: string | null;
}

export interface Tiers {
  amount: number | null;
  amountType: EnumTiersAmounttype | null;
  button: string | null;
  CollectiveId: number | null;
  createdAt: Timestamp;
  currency: Generated<string | null>;
  customFields: Json | null;
  data: Json | null;
  deletedAt: Timestamp | null;
  description: string | null;
  endsAt: Timestamp | null;
  goal: number | null;
  id: Generated<number>;
  interval: Generated<string | null>;
  longDescription: string | null;
  maxQuantity: number | null;
  minimumAmount: number | null;
  name: string | null;
  presets: number[] | null;
  slug: string | null;
  startsAt: Timestamp | null;
  type: Generated<string | null>;
  updatedAt: Timestamp;
  useStandalonePage: Generated<boolean>;
  videoUrl: string | null;
}

export interface Transactions {
  amount: number | null;
  amountInHostCurrency: number | null;
  clearedAt: Timestamp | null;
  CollectiveId: number | null;
  createdAt: Timestamp | null;
  CreatedByUserId: number | null;
  currency: Generated<string | null>;
  data: Json | null;
  deletedAt: Timestamp | null;
  description: string | null;
  ExpenseId: number | null;
  FromCollectiveId: number | null;
  HostCollectiveId: number | null;
  hostCurrency: string | null;
  hostCurrencyFxRate: number | null;
  hostFeeInHostCurrency: number | null;
  id: Generated<number>;
  isDebt: Generated<boolean>;
  isDisputed: Generated<boolean | null>;
  isInReview: Generated<boolean | null>;
  isInternal: Generated<boolean>;
  isRefund: Generated<boolean>;
  kind: EnumTransactionsKind | null;
  netAmountInCollectiveCurrency: number | null;
  OrderId: number | null;
  PaymentMethodId: number | null;
  paymentProcessorFeeInHostCurrency: number | null;
  PayoutMethodId: number | null;
  platformFeeInHostCurrency: number | null;
  RefundTransactionId: number | null;
  taxAmount: number | null;
  TransactionGroup: string | null;
  type: string | null;
  updatedAt: Timestamp;
  UsingGiftCardFromCollectiveId: number | null;
  uuid: string | null;
}

export interface TransactionSettlements {
  createdAt: Timestamp;
  deletedAt: Timestamp | null;
  ExpenseId: number | null;
  kind: EnumTransactionsKind;
  status: EnumTransactionsettlementsStatus;
  TransactionGroup: string;
  updatedAt: Timestamp;
}

export interface TransactionsImports {
  CollectiveId: number;
  ConnectedAccountId: number | null;
  createdAt: Timestamp;
  data: Json | null;
  deletedAt: Timestamp | null;
  id: Generated<number>;
  lastSyncAt: Timestamp | null;
  name: string;
  settings: Json | null;
  source: string;
  type: EnumTransactionsimportsType;
  updatedAt: Timestamp;
  UploadedFileId: number | null;
}

export interface TransactionsImportsRows {
  amount: number;
  createdAt: Timestamp;
  currency: Generated<string>;
  date: Timestamp;
  deletedAt: Timestamp | null;
  description: Generated<string>;
  ExpenseId: number | null;
  id: Generated<number>;
  isUnique: Generated<boolean>;
  note: string | null;
  OrderId: number | null;
  rawValue: Json | null;
  sourceId: string | null;
  status: Generated<EnumTransactionsimportsrowsStatus>;
  TransactionsImportId: number;
  updatedAt: Timestamp;
}

export interface UpdateHistories {
  archivedAt: Timestamp;
  CollectiveId: number | null;
  createdAt: Timestamp | null;
  CreatedByUserId: number | null;
  deletedAt: Timestamp | null;
  FromCollectiveId: number | null;
  hid: Generated<Int8>;
  html: string | null;
  id: number | null;
  image: string | null;
  isChangelog: Generated<boolean | null>;
  isPrivate: Generated<boolean | null>;
  LastEditedByUserId: number | null;
  makePublicOn: Timestamp | null;
  notificationAudience: Generated<string | null>;
  publishedAt: Timestamp | null;
  slug: string | null;
  summary: string | null;
  tags: string[] | null;
  TierId: number | null;
  title: string | null;
  updatedAt: Timestamp | null;
}

export interface Updates {
  CollectiveId: number;
  createdAt: Timestamp;
  CreatedByUserId: number;
  deletedAt: Timestamp | null;
  FromCollectiveId: number;
  html: string | null;
  id: Generated<number>;
  image: string | null;
  isChangelog: Generated<boolean>;
  isPrivate: Generated<boolean | null>;
  LastEditedByUserId: number | null;
  makePublicOn: Timestamp | null;
  notificationAudience: Generated<string | null>;
  publishedAt: Timestamp | null;
  slug: string | null;
  summary: string | null;
  tags: string[] | null;
  TierId: number | null;
  title: string | null;
  updatedAt: Timestamp;
}

export interface UploadedFiles {
  createdAt: Timestamp;
  CreatedByUserId: number | null;
  data: Json | null;
  deletedAt: Timestamp | null;
  fileName: string | null;
  fileSize: number | null;
  fileType: string;
  id: Generated<number>;
  kind: string;
  updatedAt: Timestamp;
  url: string;
}

export interface UserHistories {
  archivedAt: Timestamp;
  changelogViewDate: Timestamp | null;
  CollectiveId: number | null;
  confirmedAt: Timestamp | null;
  createdAt: Timestamp | null;
  data: Json | null;
  deletedAt: Timestamp | null;
  email: string | null;
  emailConfirmationToken: string | null;
  emailWaitingForValidation: string | null;
  firstName: string | null;
  hid: Generated<Int8>;
  id: number | null;
  lastLoginAt: Timestamp | null;
  lastName: string | null;
  newsletterOptIn: boolean | null;
  passwordHash: string | null;
  passwordUpdatedAt: Timestamp | null;
  twoFactorAuthRecoveryCodes: Generated<string[] | null>;
  twoFactorAuthToken: string | null;
  updatedAt: Timestamp | null;
  yubikeyDeviceId: Generated<string | null>;
}

export interface Users {
  changelogViewDate: Timestamp | null;
  CollectiveId: number | null;
  confirmedAt: Timestamp | null;
  createdAt: Timestamp;
  data: Json | null;
  deletedAt: Timestamp | null;
  email: string;
  emailConfirmationToken: string | null;
  emailWaitingForValidation: string | null;
  id: Generated<number>;
  lastLoginAt: Timestamp | null;
  newsletterOptIn: Generated<boolean>;
  passwordHash: string | null;
  passwordUpdatedAt: Timestamp | null;
  twoFactorAuthRecoveryCodes: Generated<string[] | null>;
  twoFactorAuthToken: string | null;
  updatedAt: Timestamp;
  yubikeyDeviceId: Generated<string | null>;
}

export interface UserTokens {
  accessToken: string;
  accessTokenExpiresAt: Timestamp;
  ApplicationId: number;
  createdAt: Timestamp;
  data: Json | null;
  deletedAt: Timestamp | null;
  id: Generated<number>;
  lastUsedAt: Timestamp | null;
  preAuthorize2FA: Generated<boolean>;
  refreshToken: string | null;
  refreshTokenExpiresAt: Timestamp | null;
  scope: ArrayType<EnumUsertokensScope> | null;
  type: EnumUsertokensType;
  updatedAt: Timestamp;
  UserId: number;
}

export interface UserTwoFactorMethods {
  createdAt: Generated<Timestamp>;
  data: Json | null;
  deletedAt: Timestamp | null;
  id: Generated<number>;
  method: string;
  name: Generated<string>;
  updatedAt: Generated<Timestamp>;
  UserId: number | null;
}

export interface VirtualCardRequests {
  CollectiveId: number | null;
  createdAt: Generated<Timestamp>;
  currency: string;
  deletedAt: Timestamp | null;
  HostCollectiveId: number | null;
  id: Generated<number>;
  notes: string;
  purpose: string;
  spendingLimitAmount: number;
  spendingLimitInterval: string;
  status: Generated<EnumVirtualcardrequestsStatus>;
  updatedAt: Generated<Timestamp>;
  UserId: number | null;
  VirtualCardId: string | null;
}

export interface VirtualCards {
  CollectiveId: number;
  createdAt: Timestamp;
  currency: string | null;
  data: Json | null;
  deletedAt: Timestamp | null;
  HostCollectiveId: number;
  id: string;
  last4: string | null;
  name: string | null;
  privateData: string | null;
  provider: EnumVirtualcardsProvider | null;
  resumedAt: Timestamp | null;
  spendingLimitAmount: number | null;
  spendingLimitInterval: string | null;
  updatedAt: Timestamp;
  UserId: number | null;
  VirtualCardRequestId: number | null;
}

export interface DB {
  AccountingCategories: AccountingCategories;
  Activities: Activities;
  Agreements: Agreements;
  Applications: Applications;
  CollectiveHistories: CollectiveHistories;
  Collectives: Collectives;
  CommentHistories: CommentHistories;
  Comments: Comments;
  ConnectedAccounts: ConnectedAccounts;
  ConversationFollowers: ConversationFollowers;
  Conversations: Conversations;
  CurrencyExchangeRates: CurrencyExchangeRates;
  CurrentCollectiveBalance: CurrentCollectiveBalance;
  CurrentCollectiveTransactionStats: CurrentCollectiveTransactionStats;
  EmojiReactions: EmojiReactions;
  ExpenseAttachedFiles: ExpenseAttachedFiles;
  ExpenseHistories: ExpenseHistories;
  ExpenseItems: ExpenseItems;
  Expenses: Expenses;
  geography_columns: GeographyColumns;
  geometry_columns: GeometryColumns;
  HostApplications: HostApplications;
  LegalDocuments: LegalDocuments;
  Locations: Locations;
  MemberInvitations: MemberInvitations;
  Members: Members;
  MigrationLogs: MigrationLogs;
  Notifications: Notifications;
  OAuthAuthorizationCodes: OAuthAuthorizationCodes;
  OrderHistories: OrderHistories;
  Orders: Orders;
  PaymentMethods: PaymentMethods;
  PayoutMethods: PayoutMethods;
  PaypalPlans: PaypalPlans;
  PaypalProducts: PaypalProducts;
  PersonalTokens: PersonalTokens;
  pg_stat_statements: PgStatStatements;
  pg_stat_statements_info: PgStatStatementsInfo;
  raster_columns: RasterColumns;
  raster_overviews: RasterOverviews;
  RecurringExpenses: RecurringExpenses;
  RequiredLegalDocuments: RequiredLegalDocuments;
  SequelizeLedgerMeta: SequelizeLedgerMeta;
  SequelizeMeta: SequelizeMeta;
  SocialLinks: SocialLinks;
  spatial_ref_sys: SpatialRefSys;
  SubscriptionHistories: SubscriptionHistories;
  Subscriptions: Subscriptions;
  SuspendedAssets: SuspendedAssets;
  TierHistories: TierHistories;
  Tiers: Tiers;
  Transactions: Transactions;
  TransactionSettlements: TransactionSettlements;
  TransactionsImports: TransactionsImports;
  TransactionsImportsRows: TransactionsImportsRows;
  UpdateHistories: UpdateHistories;
  Updates: Updates;
  UploadedFiles: UploadedFiles;
  UserHistories: UserHistories;
  Users: Users;
  UserTokens: UserTokens;
  UserTwoFactorMethods: UserTwoFactorMethods;
  VirtualCardRequests: VirtualCardRequests;
  VirtualCards: VirtualCards;
}
